// TODO   Create By ZZy

using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using UnityEngine.Events;

using UnityEngine.EventSystems;
using System.Collections.Generic;
using System;
using System.Reflection;

public class EventTool : MonoBehaviour
{
    public Rect NameRect;
    public Rect ClassRect;

    public Color NameContentColor;
    public Color ClassContentColor;

    public Color NameBgColor;
    public Color ClassBgColor;

    [SerializeField]
    private string MethordName;

    [SerializeField]
    private string MethordClass;

    void Awake()
    {
        NameRect = new Rect(100, 100, int.MaxValue, 100);
        ClassRect = new Rect(100, 120, int.MaxValue, 100);
        NameContentColor = Color.red;
        ClassContentColor = Color.red;
        NameBgColor = Color.red;
        ClassBgColor = Color.red;
    }


#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
    void OnGUI()
    {
        MethordName = string.Empty;
        MethordClass = string.Empty;
        if (EventSystem.current!=null&&!EventSystem.current.IsPointerOverGameObject())
        {
            return;
        }
        PointerEventData eventData = new PointerEventData(EventSystem.current);
        eventData.pressPosition = Input.mousePosition;
        eventData.position = Input.mousePosition;
        List<RaycastResult> list = new List<RaycastResult>();
        EventSystem.current.RaycastAll(eventData, list);
        if (list.Count == 0)
        {
            MethordName = string.Empty;
            MethordClass = string.Empty;
            return;
        }
        GetEvent(list);
    }

    private void GetEvent(List<RaycastResult> list)
    {
        for (int i = 0; i < list.Count; i++)
        {
            GameObject eventObj = list[i].gameObject;
            Ping(eventObj);

            #region  EventListener event
            BaseEventCatcher listener = eventObj.GetComponent<BaseEventCatcher>();
            if (listener != null)
            {
                if (listener.Callback != null)
                {
                    MethordName = listener.Callback.Method.Name;
                    MethordClass = listener.Callback.Target.ToString();
                }
                break;
            }

            #endregion Button Onclick event
            else
            {
                #region Button event
                Button btn = eventObj.GetComponent<Button>();
                if (btn != null)
                {
                    try
                    {
                        if (btn.onClick != null)
                        {
                            FieldInfo fieldInfo = btn.onClick.GetType().BaseType.BaseType.GetField("m_Calls", BindingFlags.Instance | BindingFlags.NonPublic);

                            var values = fieldInfo.GetValue(btn.onClick);

                            Type valueType = values.GetType();

                            FieldInfo filedInfo_ = values.GetType().GetField("m_RuntimeCalls", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Default);
                            if (filedInfo_ != null)
                            {
                                var values_1 = filedInfo_.GetValue(values);

                                Assembly LoadedAssembly = Assembly.LoadFrom(@"C:\\Program Files\\Unity\\Editor\\Data\\Managed\\UnityEngine.dll");
                                #region useLess
                                //  UnityAction action = TestAction;
                                // object[] obj = new object[] { action };


                                //object InvokableCallListObj = LoadedAssembly.CreateInstance("UnityEngine.Events.InvokableCallList");
                                //if (InvokableCallListObj != null)
                                //{
                                //    fieldInfo.SetValue(InvokableCallListObj, values, BindingFlags.CreateInstance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.SetField, null, System.Globalization.CultureInfo.CurrentCulture);
                                //}
                                //  List<object> listMc = new List<object>();
                                // listMc.Add(obj);
                                #endregion


                                FieldInfo itemsField = values_1.GetType().GetField("_items", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Default);

                                var itemsValues = itemsField.GetValue(values_1);
                                if (itemsValues.GetType().IsArray)
                                {
                                    object[] listInvokables = new object[4];
                                    UnityAction actions = UseAction;
                                    object[] actionObjs = new object[] { actions };
                                    for (int m = 0; m < 4; m++)
                                    {
                                        object InvokableCallBase = LoadedAssembly.CreateInstance("UnityEngine.Events.InvokableCall",
                                        false, //do not ignore the case
                                        BindingFlags.CreateInstance, //specifies we want to call a ctor method
                                        null, //a null binder specifies the default binder will be used (works in most cases)
                                        actionObjs, //the arguments (based on the arguments,
                                            //CreateInstance() will decide which ctor to invoke)
                                         null, //CultureInfo is null so we will use 
                                            //the culture info from the current thread
                                         null //no activation attributes
                                         );
                                        listInvokables[m] = (InvokableCallBase);
                                    }
                                    listInvokables = (object[])itemsValues;
                                    foreach (var item in listInvokables)
                                    {
                                        if (item == null)
                                        {
                                            continue;
                                        }

                                        MemberInfo[] members = item.GetType().GetMembers(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetField | BindingFlags.GetProperty);
                                        foreach (var member in members)
                                        {
                                            switch (member.MemberType)
                                            {
                                                case MemberTypes.All:
                                                    break;
                                                case MemberTypes.Constructor:
                                                    break;
                                                case MemberTypes.Custom:
                                                    break;
                                                case MemberTypes.Event:
                                                    break;
                                                case MemberTypes.Field:
                                                    {
                                                        FieldInfo[] fields = item.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetField | BindingFlags.GetProperty);
                                                        foreach (var field in fields)
                                                        {
                                                            UnityAction fieldAction = (UnityAction)field.GetValue(item);
                                                            MethordName = fieldAction.Method.Name;
                                                            MethordClass = fieldAction.Target.ToString();
                                                        }
                                                    }
                                                    break;
                                                case MemberTypes.Method:
                                                    break;
                                                case MemberTypes.NestedType:
                                                    break;
                                                case MemberTypes.Property:
                                                    {
                                                        UnityAction propertyAction = (UnityAction)(((PropertyInfo)member).GetValue(item, null));
                                                        MethordName = propertyAction.Method.Name;
                                                        MethordClass = propertyAction.Target.ToString();
                                                    }
                                                    break;
                                                case MemberTypes.TypeInfo:
                                                    break;
                                                default:
                                                    break;
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.LogError(e);
                    }

                }
                break;
                #endregion
            }
        }
        if (string.IsNullOrEmpty(MethordClass) || string.IsNullOrEmpty(MethordName))
        {
            return;
        }
        GUI.contentColor = NameContentColor;
        GUI.backgroundColor = NameBgColor;
        GUI.Label(NameRect, string.Format("this Button which trigger event methord name is {0}", MethordName));
        GUI.contentColor = ClassContentColor;
        GUI.backgroundColor = ClassBgColor;
        GUI.Label(ClassRect, string.Format("this Button which trigger event class name is {0}", MethordClass));
        
    }

    private static void Ping(GameObject eventObj)
    {
        if (Input.GetMouseButtonDown(1))
        {
            UnityEditor.EditorGUIUtility.PingObject(eventObj.GetInstanceID());
        }
    }

    private void UseAction()
    {

    }

    private void TestAction()
    {

    }
#endif

    GameObject GetGuiRaycastObject()
    {
        PointerEventData eventData = new PointerEventData(EventSystem.current);
        eventData.pressPosition = Input.mousePosition;
        eventData.position = Input.mousePosition;
        List<RaycastResult> list = new List<RaycastResult>();
        EventSystem.current.RaycastAll(eventData, list);
        //Debug.Log(list.Count);
        return list[0].gameObject;
    }
}

internal abstract class BaseInvokableCall
{
    protected BaseInvokableCall()
    {
    }
    protected BaseInvokableCall(object target, MethodInfo function)
    {
        if (target == null)
        {
            throw new ArgumentNullException("target");
        }
        if (function == null)
        {
            throw new ArgumentNullException("function");
        }
    }

    public abstract void Invoke(object[] args);
    protected static void ThrowOnInvalidArg<T>(object arg)
    {
        if (arg != null && !(arg is T))
        {
            throw new ArgumentException(string.Format("Passed argument 'args[0]' is of the wrong type. Type:{0} Expected:{1}", new object[]
				{
					arg.GetType(),
					typeof(T)
				}));
        }
    }
    protected static bool AllowInvoke(Delegate @delegate)
    {
        return @delegate.Method.IsStatic || @delegate.Target != null;
    }
    public abstract bool Find(object targetObj, MethodInfo method);
}
